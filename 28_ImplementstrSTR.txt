/*
Implement strStr().

Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

*/
/**
 * @param {string} haystack
 * @param {string} needle
 * @return {number}
 */
var strStr = function(haystack, needle) {
    let length = haystack.length;
    let m = -1;
    
    for(var i = 0; i<length; i++){
        if(m != -1){
            break;
        }
        else if(haystack[i] === needle[0]){
            
            if(needle.length <= 1){
                m = i;
                break;
            }
            else{
                
                let n = i;
                let j = i+1;

                for ( var k = 1; k<needle.length; k++){
                    

                    if(haystack[j] === needle[k]){
                        j++;
                         if( k === needle.length-1){
                                m = n;
                        
                                break;
                            }
                    }
                    else{
                        
                        break;
                    }
                }  
            }
            
        }
        
    }
    return m;
};

Another Solution: 
var strStr = function (haystack, needle) {
    
    // Base condition
    if (haystack == null || needle == null) {
        return -1;
    }
    // Special case
    if (haystack === needle) {
        return 0;
    }
    // Loop through the haystack and slide the window
    for (let i = 0; i < haystack.length - needle.length + 1; i++) {
        // Check if the substring equals to the needle
        if (haystack.substring(i, i + needle.length) === needle) {
            return i;
        }
    }
    return -1;
};