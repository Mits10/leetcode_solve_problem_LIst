Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

Answer: 

/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOfTwo = function(n) {
    let x = Math.log2(n);
    if(x % 1 === 0) return true;
    else return false;
};

//Time Complexity : O(logn)
//Space Complexity : O(1)

//js bitwise operation : 

if n is power of 2:
the binary number has one and only one bit on.
n-1 is a binary number with all his bits are on - so it is a mask fot the right zeros

(exception: n = 1 & n-1 = 0, but logic still works here)

i.e:
0000 0001 = 1
0000 0010 = 2 , (n-1)/(2-1) = 1  = 0000 0001
0000 0100 = 4 , (n-1)/(2-1) = 3  = 0000 0011
0000 1000 = 8 , (n-1)/(2-1) = 7  = 0000 0111
0001 0000 = 16, (n-1)/(2-1) = 15 = 0000 1111
0010 0000 = 32, (n-1)/(2-1) = 31 = 0001 1111

The observation we can conclude is that the number which is a power of two has always compulsoryily 1 true bit.

Now consider :-
bit representation of 7  -> 0111
bit representation of 8  -> 1000
bitwise AND of 7 and 8 -> 0000
we are gonna use this property for for all numbers which are powers of two.

using n-1 as a mask
so if n & n-1 ==0 that means n is power of 2

also adding a check is n > 0, 0 or negative numbers will never be a power of 2

var isPowerOfTwo = function(n) {
    return n > 0 && (n & (n-1)) == 0;    
};

Time Complexity : O(1)
Space Complexity : O(1)