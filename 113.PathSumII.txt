Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Answer: 

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} targetSum
 * @return {number[][]}
 */
var pathSum = function(root, targetSum) {
    var array = [];
    let stack = [];
    let level = 0;
    const dfs = (node,sum) => {
        if(!node) return;
        stack.push(node.val);
        sum = sum + node.val;
        if(!node.left && !node.right){
            if(sum === targetSum){
                if(!array[level]) {
                    array[level] = [];
                }
                array[level]= [...stack] ;
                level = level + 1;
            }
        }
        dfs(node.left,sum);
        dfs(node.right,sum);
        return stack.pop();
    }
    dfs(root,0);
    return array;
};